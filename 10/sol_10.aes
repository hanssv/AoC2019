include "List.aes"
include "Pair.aes"
contract Day10 =
  record pt      = {x : int, y : int}
  record vec     = {x : int, y : int}
  type   set('a) = map('a, unit)

  entrypoint solve_1() =
    let as = asteroids(0, 0, [], input())
    let cmp(a, b) = a >= b
    List.get(0, List.sort(cmp, [(Map.size(sight_map(p, as, {})), p) | p <- as]))

  function sight_map(p : pt, as : list(pt), m : set(vec)) =
    switch(as)
      [] => m
      q :: as =>
        if(p == q) sight_map(p, as, m)
        else       sight_map(p, as, m{[sight_vec(p, q)] = ()})

  function sight_vec(p1 : pt, p2 : pt) : vec =
    let dx = p2.x - p1.x
    let dy = p1.y - p2.y
    let k  = gcd(abs(dx), abs(dy))
    {x = dx / k, y = dy / k}

  entrypoint solve_2() =
    let p  = {x = 23, y = 20}
    let as = asteroids(0, 0, [], input())
    let cmp(a, b) = cmp_vecs(Pair.fst(a), Pair.fst(b))
    let targets = List.map(Pair.snd, List.sort(cmp, Map.to_list(sight_map2(p, as, {}))))
    switch(List.get(199, blast(targets, [])))
      (_, v) => v.x * 100 + v.y

  function blast(targets, next_rnd) =
    switch(targets)
      [] => switch(next_rnd)
              [] => []
              _  => blast(List.reverse(next_rnd), [])
      [] :: targets => blast(targets, next_rnd)
      (t :: ts) :: targets => t :: blast(targets, ts :: next_rnd)

  entrypoint quadrant(v : vec) =
    if(v.x >= 0) if(v.y >= 0) 1 else 2
    else         if(v.y >= 0) 4 else 3

  function cmp_vecs(v1, v2) =
    let q1 = quadrant(v1)
    let q2 = quadrant(v2)
    if(q1 == q2) cmp_vec(v2, v1)
    else         q1 < q2

  function cmp_vec(v1 : vec, v2 : vec) =
      v1.y * v2.x =< v2.y * v1.x

  function sight_map2(p : pt, as : list(pt), m : map(vec, list(int * pt))) =
    switch(as)
      [] => m
      q :: as =>
        if(p == q) sight_map2(p, as, m)
        else
          switch(sight_vec2(p, q))
            (k, vec) =>
              let ins(v) = List.insert_by((a, b) => a < b, (k, q), v)
              sight_map2(p, as, m{[vec = []] @ v = ins(v)})

  function sight_vec2(p1 : pt, p2 : pt) : int * vec =
    let dx = p2.x - p1.x
    let dy = p1.y - p2.y
    let k  = gcd(abs(dx), abs(dy))
    (k, {x = dx / k, y = dy / k})

  entrypoint gcd(a : int, b : int) =
    switch(b)
      0 => a
      _ => gcd(b, a mod b)

  function abs(x : int) =
    if(x < 0) -x else x

  function asteroids(x, y, as, data) : list(pt) =
    switch(data)
      []         => as
      [] :: data => asteroids(0, y + 1, as, data)
      (0 :: row) :: data => asteroids(x + 1, y, as, row :: data)
      (1 :: row) :: data => asteroids(x + 1, y, {x = x, y = y} :: as, row :: data)

  function input0() =
    [[0, 1, 0, 0, 1],
     [0, 0, 0, 0, 0],
     [1, 1, 1, 1, 1],
     [0, 0, 0, 0, 1],
     [0, 0, 0, 1, 1]]

  function input1() =
    [[0, 0, 0, 0, 0, 0, 1, 0, 1, 0],
     [1, 0, 0, 1, 0, 1, 0, 0, 0, 0],
     [0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
     [0, 1, 0, 1, 0, 1, 1, 1, 0, 0],
     [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
     [0, 0, 1, 0, 0, 0, 0, 1, 0, 1],
     [1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
     [0, 1, 1, 0, 1, 0, 0, 1, 1, 1],
     [1, 1, 0, 0, 0, 1, 0, 0, 1, 0],
     [0, 1, 0, 0, 0, 0, 1, 1, 1, 1]]

  function input() =
    [[1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1],
     [1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0],
     [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0],
     [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
     [0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1],
     [0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0],
     [0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1],
     [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1],
     [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0],
     [0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
     [0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
     [0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1],
     [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0],
     [1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
     [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0],
     [1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0],
     [1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1],
     [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0],
     [1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0],
     [0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],
     [0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1],
     [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0],
     [0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0],
     [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0],
     [0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
     [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0],
     [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0],
     [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
     [0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0],
     [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1],
     [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]]
